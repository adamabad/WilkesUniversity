//Fraction.java contains the definitions of the Fraction operations,//  as well as any auxillary functions they utilize.////  Begun by: Charles Hoot, for Hands On Java.//  Adapted from code by: Joel C. Adams, for Hands On C++.//  Completed by: Adam Abad//  Date: March 27, 2018// ***************************************************************import java.util.*;  // Scannerimport java.io.*;    // PrintStreampublic class Fraction extends Object{    private int myNumerator;    private int myDenominator;	//********************************************************	// Fraction default-value constructor.                   *	// Precondition: A Fraction object has been declared.    *	// Postcondition: myNumerator == 0 && myDenominator == 1.*	//********************************************************    public Fraction()    {	myNumerator = 0;	myDenominator = 1;    }		//********************************************************	// Fraction explicit-value constructor.                  *	// Precondition: A Fraction object has been declared.    *	// Receive: numerator, denominator, two integers.        *	// Postcondition: myNumerator == numerator &&            *	//                 myDenominator == denominator.         *	//********************************************************    public Fraction(int numerator, int denominator)    {        update(numerator,denominator);    }			//********************************************************	// Numerator accessor                                    *	// Return: the value of myNumerator.                     *	//********************************************************    public int numerator()    {	return myNumerator;    }			//********************************************************	// Denominator accessor                                  *	// Return: the value of myDenominator.                   *	//********************************************************    public int denominator()    {	return myDenominator;    }			//********************************************************	// Input function member                                 *	// Precondition: in contains a Fraction n/d.             *	// Input: in, a Scanner .                                *	// Passback: in, with fraction read                      *	// Postcondition: myNumerator == n && myDenominator == d.*	//********************************************************    public void read(Scanner in)    {	String fract = in.nextLine();	StringTokenizer parser = new StringTokenizer(fract, "/",						     false);	if (parser.countTokens() != 2)	    throw new RuntimeException("Bad format for fraction");	int num = Integer.parseInt(parser.nextToken());	int denom = Integer.parseInt(parser.nextToken());	update(num, denom);    }    public void update(int numerator, int denominator)    {	if (denominator == 0)	    throw new IllegalArgumentException("in Fraction, " +						"denominator cannot " +						"be 0.");	myNumerator = numerator;	myDenominator = denominator;    }		//********************************************************	// multiplication                                        *	// Receive: rightOperand, a Fraction object.             *	// Return: result, the product of the receiver of        *	//          this message and rightOperand.               *	//********************************************************    public Fraction times(Fraction rightOperand)    {	Fraction result = new Fraction(myNumerator *				       rightOperand.numerator(),				       myDenominator *				       rightOperand.denominator());	result.simplify();	return result;    }			//********************************************************	// Simplify a Fraction from improper to proper.          *	// Postcondition: the Fraction receiving this message    *	//                 is a proper fraction.                 *	//********************************************************    public void simplify()    {	int gcd;	while(true)	{	    gcd = greatestCommonDivisor(myNumerator, myDenominator);	    if (gcd == 1) return;	    myNumerator = myNumerator / gcd;	    myDenominator = myDenominator / gcd;	}    }					//********************************************************	// override super classes toString                       *	// Return: String equivalent of fraction                 *	//********************************************************        public String toString()    {	String retval = "";	retval = myNumerator + "/" + myDenominator;	return retval;    }	// **********************************************************	// greatestCommonDivisor finds the greatest common divisor  *	// of two integers, using Euclid's (recursive) algorithm.   *	//                                                          *	//  Receive: alpha, beta, two integers.                     *	//  Return: the greatest common divisor of alpha and beta.  *	//***********************************************************	private static int greatestCommonDivisor(int alpha, int beta)	{		alpha = Math.abs(alpha);  // take absolute values of operands		beta = Math.abs(beta);		if (beta == 0)       // base case			return alpha;		else                 // induction step		{			int remainder = alpha % beta;			return greatestCommonDivisor(beta, remainder);		}	}}