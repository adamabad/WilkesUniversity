//Metric.java contains the definitions of module metric's operations.//// Author: Adam Abad// Date: Febuary 6, 2018// Purpose: To use methods to convert between standard and metric//          systems.//// *****************************************************************public class Metric extends Object{//***********************************************************// feetToMeters() converts feet into meters.                *// Receive: feet, the (real) number of feet to be converted.*// Precondition: feet >= 0.                                 *// Return: The equivalent number of meters.                 *//***********************************************************    public static double feetToMeters(double feet)    {	double meters;	if (feet >= 0)	    {		meters = .3048 * feet;		return meters;	    }	throw new IllegalArgumentException("In feetToMeters, "			    +"feet must be > 0, not " + feet);	    }//***********************************************************// sqInchToSqMm() converts Square Inches into square        *//    millimeters                                           *// Receive: sqInch, the (real) number of sqInch to be       *//    converted.                                            *// Precondition: sqInch >= 0.                               *// Return: The equivalent number of square millimeters.     *//***********************************************************    public static double sqInchToSqMm(double sqInch)    {	double sqMm;	if (sqInch >= 0)	    {		sqMm = sqInch * 645.16;		return sqMm;	    }	throw new IllegalArgumentException("In sqInchToSqMm, "               	       + "sqInch must be > 0, not " + sqInch);    }//***********************************************************// sqFeetToSqMeters() converts Square Feet into square      *//    meters                                                *// Receive: sqFeet, the (real) number of sqFeet to be       *//    converted.                                            *// Precondition: sqFeet >= 0.                               *// Return: The equivalent number of square meters.          *//***********************************************************    public static double sqFeetToSqMeters(double sqFeet)    {	double sqMeters;	if (sqFeet >= 0)	    {		sqMeters = sqFeet * .09290304;		return sqMeters;	    }	throw new IllegalArgumentException("In sqFeetTosqMeters, "			   + "sqFeet must be > 0, not " + sqFeet);    }//***********************************************************// acresToSqMeters() converts acres into square meters      *               // Receive: acres, the (real) number of acres to be         *//    converted.                                            *// Precondition: acres >= 0.                                *// Return: The equivalent number of square meters.          *//***********************************************************    public static double acresToSqMeters(double acres)    {	double sqMeters;	if (acres >= 0)	    {		sqMeters = acres * 4.04686 * Math.pow(10,3);		return sqMeters;	    }	throw new IllegalArgumentException("In acresToSqMeters, "			    + "acres must be > 0, not " + acres);    }}